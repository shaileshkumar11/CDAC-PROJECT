
HAL_CAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005068  08005068  00006068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005080  08005080  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005088  08005088  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005090  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000154  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f258  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed8  00000000  00000000  00016294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  00018170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afe  00000000  00000000  00018f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226ad  00000000  00000000  00019a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec57  00000000  00000000  0003c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da026  00000000  00000000  0004ad72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124d98  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d30  00000000  00000000  00124ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00128b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005050 	.word	0x08005050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005050 	.word	0x08005050

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Ultrasonic_distance>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Ultrasonic_distance(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d7a:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <Ultrasonic_distance+0x38>)
 8000d7c:	f002 fa10 	bl	80031a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d80:	200a      	movs	r0, #10
 8000d82:	f000 fdf9 	bl	8001978 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d8c:	4806      	ldr	r0, [pc, #24]	@ (8000da8 <Ultrasonic_distance+0x38>)
 8000d8e:	f002 fa07 	bl	80031a0 <HAL_GPIO_WritePin>
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <Ultrasonic_distance+0x3c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <Ultrasonic_distance+0x3c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0202 	orr.w	r2, r2, #2
 8000da0:	60da      	str	r2, [r3, #12]
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	20000098 	.word	0x20000098

08000db0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	//Capture Rising Edge
	if(isRisingCaptured == 0)
 8000db8:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d11a      	bne.n	8000df6 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4840      	ldr	r0, [pc, #256]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000dc4:	f003 fac2 	bl	800434c <HAL_TIM_ReadCapturedValue>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000dcc:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6a1a      	ldr	r2, [r3, #32]
 8000dda:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 020a 	bic.w	r2, r2, #10
 8000de2:	621a      	str	r2, [r3, #32]
 8000de4:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6a1a      	ldr	r2, [r3, #32]
 8000dea:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0202 	orr.w	r2, r2, #2
 8000df2:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);

	}

}
 8000df4:	e05c      	b.n	8000eb0 <HAL_TIM_IC_CaptureCallback+0x100>
	else if(isRisingCaptured == 1)
 8000df6:	4b32      	ldr	r3, [pc, #200]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d158      	bne.n	8000eb0 <HAL_TIM_IC_CaptureCallback+0x100>
		InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4830      	ldr	r0, [pc, #192]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e02:	f003 faa3 	bl	800434c <HAL_TIM_ReadCapturedValue>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a30      	ldr	r2, [pc, #192]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e0a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	@ 0x24
		if(InputCaptureValue_2 > InputCaptureValue_1)
 8000e14:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d907      	bls.n	8000e30 <HAL_TIM_IC_CaptureCallback+0x80>
			InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b28      	ldr	r3, [pc, #160]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a29      	ldr	r2, [pc, #164]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e00f      	b.n	8000e50 <HAL_TIM_IC_CaptureCallback+0xa0>
		else if(InputCaptureValue_1 > InputCaptureValue_2)
 8000e30:	4b25      	ldr	r3, [pc, #148]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d909      	bls.n	8000e50 <HAL_TIM_IC_CaptureCallback+0xa0>
			InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e4a:	33ff      	adds	r3, #255	@ 0xff
 8000e4c:	4a20      	ldr	r2, [pc, #128]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e4e:	6013      	str	r3, [r2, #0]
		distance = InputCaptureDifference * 0.0173;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff faf9 	bl	800044c <__aeabi_ui2d>
 8000e5a:	a317      	add	r3, pc, #92	@ (adr r3, 8000eb8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	f7ff fb6e 	bl	8000540 <__aeabi_dmul>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fd7a 	bl	8000964 <__aeabi_d2uiz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000e76:	801a      	strh	r2, [r3, #0]
		isReadingFinished = 1;
 8000e78:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6a1a      	ldr	r2, [r3, #32]
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 020a 	bic.w	r2, r2, #10
 8000e92:	621a      	str	r2, [r3, #32]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a12      	ldr	r2, [r2, #32]
 8000e9e:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0202 	bic.w	r2, r2, #2
 8000eae:	60da      	str	r2, [r3, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58e21965 	.word	0x58e21965
 8000ebc:	3f91b717 	.word	0x3f91b717
 8000ec0:	2000014f 	.word	0x2000014f
 8000ec4:	20000098 	.word	0x20000098
 8000ec8:	20000150 	.word	0x20000150
 8000ecc:	20000154 	.word	0x20000154
 8000ed0:	20000158 	.word	0x20000158
 8000ed4:	2000014c 	.word	0x2000014c
 8000ed8:	2000014e 	.word	0x2000014e

08000edc <Read_RainSensor>:



uint8_t Read_RainSensor(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	// Digital input: 1 if dry, 0 if rain detected
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6); // Example pin
 8000ee0:	2140      	movs	r1, #64	@ 0x40
 8000ee2:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <Read_RainSensor+0x14>)
 8000ee4:	f002 f944 	bl	8003170 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <Read_Ultrasonic>:

void Read_Ultrasonic(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	Ultrasonic_distance();  // Triggers ultrasonic and handles capture via ISR
 8000ef8:	f7ff ff3a 	bl	8000d70 <Ultrasonic_distance>
	while (!isReadingFinished); // Wait for measurement to complete
 8000efc:	bf00      	nop
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <Read_Ultrasonic+0x1c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0fb      	beq.n	8000efe <Read_Ultrasonic+0xa>
	isReadingFinished = 0;
 8000f06:	4b02      	ldr	r3, [pc, #8]	@ (8000f10 <Read_Ultrasonic+0x1c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000014e 	.word	0x2000014e
 8000f14:	00000000 	.word	0x00000000

08000f18 <Read_Temperature>:

uint16_t Read_Temperature(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

	uint16_t raw_adc = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	807b      	strh	r3, [r7, #2]
	float temperature = 0.0;
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc2); // Ensure you initialize ADC1
 8000f28:	4821      	ldr	r0, [pc, #132]	@ (8000fb0 <Read_Temperature+0x98>)
 8000f2a:	f000 fd8d 	bl	8001a48 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 8000f2e:	2164      	movs	r1, #100	@ 0x64
 8000f30:	481f      	ldr	r0, [pc, #124]	@ (8000fb0 <Read_Temperature+0x98>)
 8000f32:	f000 fe8e 	bl	8001c52 <HAL_ADC_PollForConversion>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d127      	bne.n	8000f8c <Read_Temperature+0x74>
	{
		raw_adc = HAL_ADC_GetValue(&hadc2);
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <Read_Temperature+0x98>)
 8000f3e:	f000 ff13 	bl	8001d68 <HAL_ADC_GetValue>
 8000f42:	4603      	mov	r3, r0
 8000f44:	807b      	strh	r3, [r7, #2]
		temperature = (raw_adc * 3.3 / 4096.0) * 10;  // For LM35: 10mV/°C
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa8f 	bl	800046c <__aeabi_i2d>
 8000f4e:	a316      	add	r3, pc, #88	@ (adr r3, 8000fa8 <Read_Temperature+0x90>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff faf4 	bl	8000540 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <Read_Temperature+0x9c>)
 8000f66:	f7ff fc15 	bl	8000794 <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <Read_Temperature+0xa0>)
 8000f78:	f7ff fae2 	bl	8000540 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd0e 	bl	80009a4 <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
	}
	HAL_ADC_Stop(&hadc2);
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <Read_Temperature+0x98>)
 8000f8e:	f000 fe2d 	bl	8001bec <HAL_ADC_Stop>
	return (uint16_t)temperature;
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9a:	ee17 3a90 	vmov	r3, s15
 8000f9e:	b29b      	uxth	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	40b00000 	.word	0x40b00000
 8000fb8:	40240000 	.word	0x40240000

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fc67 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f863 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 fa0d 	bl	80013e8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000fce:	f000 f91b 	bl	8001208 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000fd2:	f000 f96f 	bl	80012b4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 f9dd 	bl	8001394 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000fda:	f000 f8c3 	bl	8001164 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000fde:	4826      	ldr	r0, [pc, #152]	@ (8001078 <main+0xbc>)
 8000fe0:	f001 faca 	bl	8002578 <HAL_CAN_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4825      	ldr	r0, [pc, #148]	@ (800107c <main+0xc0>)
 8000fe8:	f002 fe34 	bl	8003c54 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	TxHeader.DLC = 5;
 8000fec:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <main+0xc4>)
 8000fee:	2205      	movs	r2, #5
 8000ff0:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <main+0xc4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <main+0xc4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x0A9;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <main+0xc4>)
 8001000:	22a9      	movs	r2, #169	@ 0xa9
 8001002:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 8001004:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <main+0xc4>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
	TxHeader.TransmitGlobalTime = DISABLE;
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <main+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	751a      	strb	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_Ultrasonic();
 8001010:	f7ff ff70 	bl	8000ef4 <Read_Ultrasonic>
	 uint8_t rain = Read_RainSensor();
 8001014:	f7ff ff62 	bl	8000edc <Read_RainSensor>
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
	 uint16_t temp = Read_Temperature();
 800101c:	f7ff ff7c 	bl	8000f18 <Read_Temperature>
 8001020:	4603      	mov	r3, r0
 8001022:	80bb      	strh	r3, [r7, #4]
	 TxData[0] = (uint8_t)(distance >> 8);
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <main+0xc8>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <main+0xcc>)
 8001030:	701a      	strb	r2, [r3, #0]
	 TxData[1] = (uint8_t)(distance & 0xFF);
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <main+0xc8>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <main+0xcc>)
 800103a:	705a      	strb	r2, [r3, #1]
  	 TxData[2] = rain;
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <main+0xcc>)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	7093      	strb	r3, [r2, #2]
  	 TxData[3] = (uint8_t)(temp >> 8);
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b29b      	uxth	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <main+0xcc>)
 800104c:	70da      	strb	r2, [r3, #3]
  	 TxData[4] = (uint8_t)(temp & 0xFF);
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <main+0xcc>)
 8001054:	711a      	strb	r2, [r3, #4]
 	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <main+0xd0>)
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <main+0xcc>)
 800105a:	4909      	ldr	r1, [pc, #36]	@ (8001080 <main+0xc4>)
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <main+0xbc>)
 800105e:	f001 facf 	bl	8002600 <HAL_CAN_AddTxMessage>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <main+0xb0>
				Error_Handler();
 8001068:	f000 fa3a 	bl	80014e0 <Error_Handler>
	HAL_Delay(1000);
 800106c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001070:	f000 fc82 	bl	8001978 <HAL_Delay>
  {
 8001074:	e7cc      	b.n	8001010 <main+0x54>
 8001076:	bf00      	nop
 8001078:	20000070 	.word	0x20000070
 800107c:	20000098 	.word	0x20000098
 8001080:	20000128 	.word	0x20000128
 8001084:	2000014c 	.word	0x2000014c
 8001088:	20000140 	.word	0x20000140
 800108c:	20000148 	.word	0x20000148

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	@ 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 ffaa 	bl	8004ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a27      	ldr	r2, [pc, #156]	@ (800115c <SystemClock_Config+0xcc>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <SystemClock_Config+0xd0>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001104:	2348      	movs	r3, #72	@ 0x48
 8001106:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800110c:	2307      	movs	r3, #7
 800110e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f002 f85d 	bl	80031d4 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001120:	f000 f9de 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fabe 	bl	80036c4 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800114e:	f000 f9c7 	bl	80014e0 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	@ 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <MX_ADC2_Init+0x9c>)
 800117a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_ADC2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_ADC2_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <MX_ADC2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <MX_ADC2_Init+0xa0>)
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011be:	2201      	movs	r2, #1
 80011c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	480e      	ldr	r0, [pc, #56]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011c4:	f000 fbfc 	bl	80019c0 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 f987 	bl	80014e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011d2:	230a      	movs	r3, #10
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011e4:	f000 fdce 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80011ee:	f000 f977 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000028 	.word	0x20000028
 8001200:	40012100 	.word	0x40012100
 8001204:	0f000001 	.word	0x0f000001

08001208 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001210:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <MX_CAN1_Init+0xa8>)
 8001212:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001214:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001216:	2212      	movs	r2, #18
 8001218:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <MX_CAN1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001228:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800122c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_CAN1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_CAN1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001258:	4814      	ldr	r0, [pc, #80]	@ (80012ac <MX_CAN1_Init+0xa4>)
 800125a:	f000 ffb1 	bl	80021c0 <HAL_CAN_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 f93c 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9;
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001270:	2301      	movs	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0xFF00;
 8001278:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800127c:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x1500;
 8001282:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8001286:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_CAN1_Init+0xa4>)
 8001296:	f001 f88f 	bl	80023b8 <HAL_CAN_ConfigFilter>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_CAN1_Init+0x9c>
	   Error_Handler();
 80012a0:	f000 f91e 	bl	80014e0 <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	@ 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000070 	.word	0x20000070
 80012b0:	40006400 	.word	0x40006400

080012b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <MX_TIM4_Init+0xd8>)
 80012e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001390 <MX_TIM4_Init+0xdc>)
 80012e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <MX_TIM4_Init+0xd8>)
 80012e6:	2253      	movs	r2, #83	@ 0x53
 80012e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <MX_TIM4_Init+0xd8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012f0:	4b26      	ldr	r3, [pc, #152]	@ (800138c <MX_TIM4_Init+0xd8>)
 80012f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <MX_TIM4_Init+0xd8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <MX_TIM4_Init+0xd8>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001304:	4821      	ldr	r0, [pc, #132]	@ (800138c <MX_TIM4_Init+0xd8>)
 8001306:	f002 fbfd 	bl	8003b04 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 f8e6 	bl	80014e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4619      	mov	r1, r3
 8001320:	481a      	ldr	r0, [pc, #104]	@ (800138c <MX_TIM4_Init+0xd8>)
 8001322:	f002 ff4b 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800132c:	f000 f8d8 	bl	80014e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001330:	4816      	ldr	r0, [pc, #88]	@ (800138c <MX_TIM4_Init+0xd8>)
 8001332:	f002 fc36 	bl	8003ba2 <HAL_TIM_IC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f8d0 	bl	80014e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	480f      	ldr	r0, [pc, #60]	@ (800138c <MX_TIM4_Init+0xd8>)
 8001350:	f003 fafe 	bl	8004950 <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800135a:	f000 f8c1 	bl	80014e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001362:	2301      	movs	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_TIM4_Init+0xd8>)
 8001376:	f002 fe85 	bl	8004084 <HAL_TIM_IC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001380:	f000 f8ae 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000098 	.word	0x20000098
 8001390:	40000800 	.word	0x40000800

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f003 fb50 	bl	8004a70 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f883 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000e0 	.word	0x200000e0
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a33      	ldr	r2, [pc, #204]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a2c      	ldr	r2, [pc, #176]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_GPIO_Init+0xec>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_GPIO_Init+0xec>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a25      	ldr	r2, [pc, #148]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <MX_GPIO_Init+0xec>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_GPIO_Init+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8001490:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <MX_GPIO_Init+0xf0>)
 8001492:	f001 fe85 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001496:	2341      	movs	r3, #65	@ 0x41
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <MX_GPIO_Init+0xf4>)
 80014aa:	f001 fcc5 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 80014ae:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_GPIO_Init+0xf0>)
 80014c8:	f001 fcb6 	bl	8002e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40020000 	.word	0x40020000

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <Error_Handler+0x8>

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f001 fc42 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_ADC_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d127      	bne.n	80015ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_ADC_MspInit+0x80>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <HAL_ADC_MspInit+0x80>)
 8001568:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_ADC_MspInit+0x80>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_ADC_MspInit+0x80>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a0e      	ldr	r2, [pc, #56]	@ (80015bc <HAL_ADC_MspInit+0x80>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_ADC_MspInit+0x80>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159a:	2303      	movs	r3, #3
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <HAL_ADC_MspInit+0x84>)
 80015aa:	f001 fc45 	bl	8002e38 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	@ 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40012100 	.word	0x40012100
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020800 	.word	0x40020800

080015c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_CAN_MspInit+0x94>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d134      	bne.n	8001650 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <HAL_CAN_MspInit+0x98>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <HAL_CAN_MspInit+0x98>)
 80015f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_CAN_MspInit+0x98>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_CAN_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_CAN_MspInit+0x98>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_CAN_MspInit+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001630:	2309      	movs	r3, #9
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	@ (8001660 <HAL_CAN_MspInit+0x9c>)
 800163c:	f001 fbfc 	bl	8002e38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2014      	movs	r0, #20
 8001646:	f001 fbc0 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800164a:	2014      	movs	r0, #20
 800164c:	f001 fbd9 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40006400 	.word	0x40006400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <HAL_TIM_Base_MspInit+0x94>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d134      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_TIM_Base_MspInit+0x98>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <HAL_TIM_Base_MspInit+0x98>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_TIM_Base_MspInit+0x98>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_TIM_Base_MspInit+0x98>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <HAL_TIM_Base_MspInit+0x98>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_TIM_Base_MspInit+0x98>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016d0:	2302      	movs	r3, #2
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4809      	ldr	r0, [pc, #36]	@ (8001700 <HAL_TIM_Base_MspInit+0x9c>)
 80016dc:	f001 fbac 	bl	8002e38 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	201e      	movs	r0, #30
 80016e6:	f001 fb70 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016ea:	201e      	movs	r0, #30
 80016ec:	f001 fb89 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40000800 	.word	0x40000800
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020c00 	.word	0x40020c00

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_UART_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_UART_MspInit+0x88>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800175e:	230c      	movs	r3, #12
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176e:	2307      	movs	r3, #7
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_UART_MspInit+0x8c>)
 800177a:	f001 fb5d 	bl	8002e38 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004400 	.word	0x40004400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f8a5 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <CAN1_RX0_IRQHandler+0x10>)
 80017fa:	f000 ffd1 	bl	80027a0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000070 	.word	0x20000070

08001808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM4_IRQHandler+0x10>)
 800180e:	f002 fb49 	bl	8003ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000098 	.word	0x20000098

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001878 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001844:	f7ff ffea 	bl	800181c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	@ (800187c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	@ (8001880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	@ (800188c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f003 fbcb 	bl	8005008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff fba3 	bl	8000fbc <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001884:	08005090 	.word	0x08005090
  ldr r2, =_sbss
 8001888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800188c:	20000160 	.word	0x20000160

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f001 fa79 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fe10 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fa91 	bl	8002e1e <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001914:	f001 fa59 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000000 	.word	0x20000000
 8001930:	20000008 	.word	0x20000008
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	2000015c 	.word	0x2000015c

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000015c 	.word	0x2000015c

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e033      	b.n	8001a3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fdac 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d118      	bne.n	8001a30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a06:	f023 0302 	bic.w	r3, r3, #2
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fad8 	bl	8001fc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a2e:	e001      	b.n	8001a34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Start+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e0b2      	b.n	8001bc8 <HAL_ADC_Start+0x180>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d018      	beq.n	8001aaa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a88:	4b52      	ldr	r3, [pc, #328]	@ (8001bd4 <HAL_ADC_Start+0x18c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	@ (8001bd8 <HAL_ADC_Start+0x190>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9a      	lsrs	r2, r3, #18
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d17a      	bne.n	8001bae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ae2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afc:	f023 0206 	bic.w	r2, r3, #6
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b14:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_ADC_Start+0x194>)
 8001b16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b20:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d12a      	bne.n	8001b84 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2b      	ldr	r2, [pc, #172]	@ (8001be0 <HAL_ADC_Start+0x198>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d015      	beq.n	8001b64 <HAL_ADC_Start+0x11c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a29      	ldr	r2, [pc, #164]	@ (8001be4 <HAL_ADC_Start+0x19c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_Start+0x106>
 8001b42:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <HAL_ADC_Start+0x194>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00a      	beq.n	8001b64 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a25      	ldr	r2, [pc, #148]	@ (8001be8 <HAL_ADC_Start+0x1a0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d136      	bne.n	8001bc6 <HAL_ADC_Start+0x17e>
 8001b58:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <HAL_ADC_Start+0x194>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d130      	bne.n	8001bc6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d129      	bne.n	8001bc6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	e020      	b.n	8001bc6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a15      	ldr	r2, [pc, #84]	@ (8001be0 <HAL_ADC_Start+0x198>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11b      	bne.n	8001bc6 <HAL_ADC_Start+0x17e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d114      	bne.n	8001bc6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e00b      	b.n	8001bc6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f043 0210 	orr.w	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	431bde83 	.word	0x431bde83
 8001bdc:	40012300 	.word	0x40012300
 8001be0:	40012000 	.word	0x40012000
 8001be4:	40012100 	.word	0x40012100
 8001be8:	40012200 	.word	0x40012200

08001bec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Stop+0x16>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e021      	b.n	8001c46 <HAL_ADC_Stop+0x5a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6e:	d113      	bne.n	8001c98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c7e:	d10b      	bne.n	8001c98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e063      	b.n	8001d60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c98:	f7ff fe62 	bl	8001960 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c9e:	e021      	b.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <HAL_ADC_PollForConversion+0x6c>
 8001cae:	f7ff fe57 	bl	8001960 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d212      	bcs.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d00b      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f043 0204 	orr.w	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03d      	b.n	8001d60 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d1d6      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0212 	mvn.w	r2, #18
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d123      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11f      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d111      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e105      	b.n	8001fac <HAL_ADC_ConfigChannel+0x228>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d925      	bls.n	8001dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4403      	add	r3, r0
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	409a      	lsls	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	e022      	b.n	8001e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	2207      	movs	r2, #7
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d824      	bhi.n	8001e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b05      	subs	r3, #5
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e92:	e04c      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b23      	subs	r3, #35	@ 0x23
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	@ 0x23
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee4:	e023      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	@ 0x41
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b41      	subs	r3, #65	@ 0x41
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x234>)
 8001f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b12      	cmp	r3, #18
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d123      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x1e6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b11      	cmp	r3, #17
 8001f68:	d11b      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d111      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x240>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	@ (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002102:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0ed      	b.n	80023ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff f9f0 	bl	80015c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021f4:	f7ff fbb4 	bl	8001960 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021fa:	e012      	b.n	8002222 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021fc:	f7ff fbb0 	bl	8001960 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b0a      	cmp	r3, #10
 8002208:	d90b      	bls.n	8002222 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2205      	movs	r2, #5
 800221a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0c5      	b.n	80023ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0e5      	beq.n	80021fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0202 	bic.w	r2, r2, #2
 800223e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7ff fb8e 	bl	8001960 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002246:	e012      	b.n	800226e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002248:	f7ff fb8a 	bl	8001960 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b0a      	cmp	r3, #10
 8002254:	d90b      	bls.n	800226e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2205      	movs	r2, #5
 8002266:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e09f      	b.n	80023ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e5      	bne.n	8002248 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e1b      	ldrb	r3, [r3, #24]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e007      	b.n	80022a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e5b      	ldrb	r3, [r3, #25]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e007      	b.n	80022d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7e9b      	ldrb	r3, [r3, #26]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d108      	bne.n	80022ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e007      	b.n	80022fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0220 	bic.w	r2, r2, #32
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	7edb      	ldrb	r3, [r3, #27]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d108      	bne.n	8002314 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0210 	bic.w	r2, r2, #16
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	e007      	b.n	8002324 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0210 	orr.w	r2, r2, #16
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e007      	b.n	800234e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7f5b      	ldrb	r3, [r3, #29]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0204 	orr.w	r2, r2, #4
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e007      	b.n	8002378 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	ea42 0103 	orr.w	r1, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d003      	beq.n	80023de <HAL_CAN_ConfigFilter+0x26>
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	f040 80be 	bne.w	800255a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023de:	4b65      	ldr	r3, [pc, #404]	@ (8002574 <HAL_CAN_ConfigFilter+0x1bc>)
 80023e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023f8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	431a      	orrs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2201      	movs	r2, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43db      	mvns	r3, r3
 8002430:	401a      	ands	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d123      	bne.n	8002488 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002462:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3248      	adds	r2, #72	@ 0x48
 8002468:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800247c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	3348      	adds	r3, #72	@ 0x48
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d122      	bne.n	80024d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3248      	adds	r2, #72	@ 0x48
 80024b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	3348      	adds	r3, #72	@ 0x48
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	401a      	ands	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80024f0:	e007      	b.n	8002502 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43db      	mvns	r3, r3
 8002514:	401a      	ands	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800251c:	e007      	b.n	800252e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800254c:	f023 0201 	bic.w	r2, r3, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e006      	b.n	8002568 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40006400 	.word	0x40006400

08002578 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d12e      	bne.n	80025ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff f9dc 	bl	8001960 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025aa:	e012      	b.n	80025d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025ac:	f7ff f9d8 	bl	8001960 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b0a      	cmp	r3, #10
 80025b8:	d90b      	bls.n	80025d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2205      	movs	r2, #5
 80025ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e012      	b.n	80025f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e5      	bne.n	80025ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e006      	b.n	80025f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800261e:	7ffb      	ldrb	r3, [r7, #31]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d003      	beq.n	800262c <HAL_CAN_AddTxMessage+0x2c>
 8002624:	7ffb      	ldrb	r3, [r7, #31]
 8002626:	2b02      	cmp	r3, #2
 8002628:	f040 80ad 	bne.w	8002786 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8095 	beq.w	8002776 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	0e1b      	lsrs	r3, r3, #24
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002656:	2201      	movs	r2, #1
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	6809      	ldr	r1, [r1, #0]
 8002676:	431a      	orrs	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3318      	adds	r3, #24
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	440b      	add	r3, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00f      	b.n	80026a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800268e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002698:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3318      	adds	r3, #24
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	440b      	add	r3, r1
 80026a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3318      	adds	r3, #24
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	440b      	add	r3, r1
 80026b4:	3304      	adds	r3, #4
 80026b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	7d1b      	ldrb	r3, [r3, #20]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d111      	bne.n	80026e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3318      	adds	r3, #24
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	3304      	adds	r3, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6811      	ldr	r1, [r2, #0]
 80026d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3318      	adds	r3, #24
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	440b      	add	r3, r1
 80026e0:	3304      	adds	r3, #4
 80026e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3307      	adds	r3, #7
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	061a      	lsls	r2, r3, #24
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3306      	adds	r3, #6
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3305      	adds	r3, #5
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	4313      	orrs	r3, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	3204      	adds	r2, #4
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	4610      	mov	r0, r2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6811      	ldr	r1, [r2, #0]
 800270c:	ea43 0200 	orr.w	r2, r3, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	440b      	add	r3, r1
 8002716:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800271a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3303      	adds	r3, #3
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	061a      	lsls	r2, r3, #24
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3302      	adds	r3, #2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3301      	adds	r3, #1
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	4313      	orrs	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	4610      	mov	r0, r2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6811      	ldr	r1, [r2, #0]
 8002742:	ea43 0200 	orr.w	r2, r3, r0
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	440b      	add	r3, r1
 800274c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002750:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3318      	adds	r3, #24
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	4413      	add	r3, r2
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6811      	ldr	r1, [r2, #0]
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3318      	adds	r3, #24
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	440b      	add	r3, r1
 8002770:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e00e      	b.n	8002794 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e006      	b.n	8002794 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3724      	adds	r7, #36	@ 0x24
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d07c      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d023      	beq.n	8002838 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f983 	bl	8002b0e <HAL_CAN_TxMailbox0CompleteCallback>
 8002808:	e016      	b.n	8002838 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
 800281c:	e00c      	b.n	8002838 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002830:	e002      	b.n	8002838 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f989 	bl	8002b4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d024      	beq.n	800288c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800284a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f963 	bl	8002b22 <HAL_CAN_TxMailbox1CompleteCallback>
 800285c:	e016      	b.n	800288c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002870:	e00c      	b.n	800288c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24
 8002884:	e002      	b.n	800288c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f969 	bl	8002b5e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d024      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800289e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f943 	bl	8002b36 <HAL_CAN_TxMailbox2CompleteCallback>
 80028b0:	e016      	b.n	80028e0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c4:	e00c      	b.n	80028e0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d8:	e002      	b.n	80028e0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f949 	bl	8002b72 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2208      	movs	r2, #8
 800291e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f93a 	bl	8002b9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f921 	bl	8002b86 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2210      	movs	r2, #16
 8002966:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d006      	beq.n	800298a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2208      	movs	r2, #8
 8002982:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f91c 	bl	8002bc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d009      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f903 	bl	8002bae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2210      	movs	r2, #16
 80029c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f906 	bl	8002bd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2208      	movs	r2, #8
 80029e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8ff 	bl	8002bea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d07b      	beq.n	8002aee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d072      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d043      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03e      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a6e:	2b60      	cmp	r3, #96	@ 0x60
 8002a70:	d02b      	beq.n	8002aca <HAL_CAN_IRQHandler+0x32a>
 8002a72:	2b60      	cmp	r3, #96	@ 0x60
 8002a74:	d82e      	bhi.n	8002ad4 <HAL_CAN_IRQHandler+0x334>
 8002a76:	2b50      	cmp	r3, #80	@ 0x50
 8002a78:	d022      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x320>
 8002a7a:	2b50      	cmp	r3, #80	@ 0x50
 8002a7c:	d82a      	bhi.n	8002ad4 <HAL_CAN_IRQHandler+0x334>
 8002a7e:	2b40      	cmp	r3, #64	@ 0x40
 8002a80:	d019      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x316>
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	d826      	bhi.n	8002ad4 <HAL_CAN_IRQHandler+0x334>
 8002a86:	2b30      	cmp	r3, #48	@ 0x30
 8002a88:	d010      	beq.n	8002aac <HAL_CAN_IRQHandler+0x30c>
 8002a8a:	2b30      	cmp	r3, #48	@ 0x30
 8002a8c:	d822      	bhi.n	8002ad4 <HAL_CAN_IRQHandler+0x334>
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d002      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x2f8>
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d005      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a96:	e01d      	b.n	8002ad4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aa0:	e019      	b.n	8002ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aaa:	e014      	b.n	8002ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	f043 0320 	orr.w	r3, r3, #32
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ab4:	e00f      	b.n	8002ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002abe:	e00a      	b.n	8002ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ac8:	e005      	b.n	8002ad6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ad4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ae4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f87c 	bl	8002bfe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	@ 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	@ (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4907      	ldr	r1, [pc, #28]	@ (8002cb0 <__NVIC_EnableIRQ+0x38>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	@ (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	@ (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	@ 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d94:	f7ff ff8e 	bl	8002cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff29 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff3e 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff8e 	bl	8002d08 <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5d 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff31 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e16b      	b.n	800312c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	f040 815a 	bne.w	8003126 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d005      	beq.n	8002e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d130      	bne.n	8002eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 0201 	and.w	r2, r3, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d017      	beq.n	8002f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d123      	bne.n	8002f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	08da      	lsrs	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3208      	adds	r2, #8
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3208      	adds	r2, #8
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80b4 	beq.w	8003126 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b60      	ldr	r3, [pc, #384]	@ (8003144 <HAL_GPIO_Init+0x30c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003144 <HAL_GPIO_Init+0x30c>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fce:	4b5d      	ldr	r3, [pc, #372]	@ (8003144 <HAL_GPIO_Init+0x30c>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fda:	4a5b      	ldr	r2, [pc, #364]	@ (8003148 <HAL_GPIO_Init+0x310>)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	@ (800314c <HAL_GPIO_Init+0x314>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02b      	beq.n	800305e <HAL_GPIO_Init+0x226>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a51      	ldr	r2, [pc, #324]	@ (8003150 <HAL_GPIO_Init+0x318>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d025      	beq.n	800305a <HAL_GPIO_Init+0x222>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a50      	ldr	r2, [pc, #320]	@ (8003154 <HAL_GPIO_Init+0x31c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <HAL_GPIO_Init+0x21e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4f      	ldr	r2, [pc, #316]	@ (8003158 <HAL_GPIO_Init+0x320>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x21a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a4e      	ldr	r2, [pc, #312]	@ (800315c <HAL_GPIO_Init+0x324>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x216>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4d      	ldr	r2, [pc, #308]	@ (8003160 <HAL_GPIO_Init+0x328>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x212>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4c      	ldr	r2, [pc, #304]	@ (8003164 <HAL_GPIO_Init+0x32c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x20e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4b      	ldr	r2, [pc, #300]	@ (8003168 <HAL_GPIO_Init+0x330>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x20a>
 800303e:	2307      	movs	r3, #7
 8003040:	e00e      	b.n	8003060 <HAL_GPIO_Init+0x228>
 8003042:	2308      	movs	r3, #8
 8003044:	e00c      	b.n	8003060 <HAL_GPIO_Init+0x228>
 8003046:	2306      	movs	r3, #6
 8003048:	e00a      	b.n	8003060 <HAL_GPIO_Init+0x228>
 800304a:	2305      	movs	r3, #5
 800304c:	e008      	b.n	8003060 <HAL_GPIO_Init+0x228>
 800304e:	2304      	movs	r3, #4
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x228>
 8003052:	2303      	movs	r3, #3
 8003054:	e004      	b.n	8003060 <HAL_GPIO_Init+0x228>
 8003056:	2302      	movs	r3, #2
 8003058:	e002      	b.n	8003060 <HAL_GPIO_Init+0x228>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_GPIO_Init+0x228>
 800305e:	2300      	movs	r3, #0
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	f002 0203 	and.w	r2, r2, #3
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	4093      	lsls	r3, r2
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003070:	4935      	ldr	r1, [pc, #212]	@ (8003148 <HAL_GPIO_Init+0x310>)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3302      	adds	r3, #2
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800307e:	4b3b      	ldr	r3, [pc, #236]	@ (800316c <HAL_GPIO_Init+0x334>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030a2:	4a32      	ldr	r2, [pc, #200]	@ (800316c <HAL_GPIO_Init+0x334>)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a8:	4b30      	ldr	r3, [pc, #192]	@ (800316c <HAL_GPIO_Init+0x334>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030cc:	4a27      	ldr	r2, [pc, #156]	@ (800316c <HAL_GPIO_Init+0x334>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030d2:	4b26      	ldr	r3, [pc, #152]	@ (800316c <HAL_GPIO_Init+0x334>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030f6:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <HAL_GPIO_Init+0x334>)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_GPIO_Init+0x334>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003120:	4a12      	ldr	r2, [pc, #72]	@ (800316c <HAL_GPIO_Init+0x334>)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3301      	adds	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b0f      	cmp	r3, #15
 8003130:	f67f ae90 	bls.w	8002e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3724      	adds	r7, #36	@ 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40013800 	.word	0x40013800
 800314c:	40020000 	.word	0x40020000
 8003150:	40020400 	.word	0x40020400
 8003154:	40020800 	.word	0x40020800
 8003158:	40020c00 	.word	0x40020c00
 800315c:	40021000 	.word	0x40021000
 8003160:	40021400 	.word	0x40021400
 8003164:	40021800 	.word	0x40021800
 8003168:	40021c00 	.word	0x40021c00
 800316c:	40013c00 	.word	0x40013c00

08003170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e001      	b.n	8003192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031bc:	e003      	b.n	80031c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e267      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d075      	beq.n	80032de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031f2:	4b88      	ldr	r3, [pc, #544]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d00c      	beq.n	8003218 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b85      	ldr	r3, [pc, #532]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003206:	2b08      	cmp	r3, #8
 8003208:	d112      	bne.n	8003230 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b82      	ldr	r3, [pc, #520]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003216:	d10b      	bne.n	8003230 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	4b7e      	ldr	r3, [pc, #504]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d05b      	beq.n	80032dc <HAL_RCC_OscConfig+0x108>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d157      	bne.n	80032dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e242      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x74>
 800323a:	4b76      	ldr	r3, [pc, #472]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a75      	ldr	r2, [pc, #468]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e01d      	b.n	8003284 <HAL_RCC_OscConfig+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x98>
 8003252:	4b70      	ldr	r3, [pc, #448]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6f      	ldr	r2, [pc, #444]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b6d      	ldr	r3, [pc, #436]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6c      	ldr	r2, [pc, #432]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0xb0>
 800326c:	4b69      	ldr	r3, [pc, #420]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a68      	ldr	r2, [pc, #416]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b66      	ldr	r3, [pc, #408]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a65      	ldr	r2, [pc, #404]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 800327e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fb68 	bl	8001960 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fb64 	bl	8001960 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	@ 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e207      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0xc0>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fb54 	bl	8001960 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fb50 	bl	8001960 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1f3      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	4b51      	ldr	r3, [pc, #324]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0xe8>
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d063      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b47      	ldr	r3, [pc, #284]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d11c      	bne.n	800333c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b44      	ldr	r3, [pc, #272]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	4b41      	ldr	r3, [pc, #260]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x152>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1c7      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003326:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4937      	ldr	r1, [pc, #220]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	e03a      	b.n	80033b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003344:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <HAL_RCC_OscConfig+0x244>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fe fb09 	bl	8001960 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe fb05 	bl	8001960 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1a8      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b28      	ldr	r3, [pc, #160]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4925      	ldr	r1, [pc, #148]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <HAL_RCC_OscConfig+0x244>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fae8 	bl	8001960 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003394:	f7fe fae4 	bl	8001960 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e187      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d036      	beq.n	800342c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <HAL_RCC_OscConfig+0x248>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fac8 	bl	8001960 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe fac4 	bl	8001960 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e167      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <HAL_RCC_OscConfig+0x240>)
 80033e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x200>
 80033f2:	e01b      	b.n	800342c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCC_OscConfig+0x248>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fe fab1 	bl	8001960 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	e00e      	b.n	8003420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe faad 	bl	8001960 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d907      	bls.n	8003420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e150      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
 8003414:	40023800 	.word	0x40023800
 8003418:	42470000 	.word	0x42470000
 800341c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b88      	ldr	r3, [pc, #544]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ea      	bne.n	8003402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8097 	beq.w	8003568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b81      	ldr	r3, [pc, #516]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	4b7d      	ldr	r3, [pc, #500]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	4a7c      	ldr	r2, [pc, #496]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	@ 0x40
 800345a:	4b7a      	ldr	r3, [pc, #488]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b77      	ldr	r3, [pc, #476]	@ (8003648 <HAL_RCC_OscConfig+0x474>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b74      	ldr	r3, [pc, #464]	@ (8003648 <HAL_RCC_OscConfig+0x474>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a73      	ldr	r2, [pc, #460]	@ (8003648 <HAL_RCC_OscConfig+0x474>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fe fa6d 	bl	8001960 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe fa69 	bl	8001960 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e10c      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b6a      	ldr	r3, [pc, #424]	@ (8003648 <HAL_RCC_OscConfig+0x474>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x2ea>
 80034b0:	4b64      	ldr	r3, [pc, #400]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b4:	4a63      	ldr	r2, [pc, #396]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80034bc:	e01c      	b.n	80034f8 <HAL_RCC_OscConfig+0x324>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x30c>
 80034c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0x324>
 80034e0:	4b58      	ldr	r3, [pc, #352]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	4a57      	ldr	r2, [pc, #348]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ec:	4b55      	ldr	r3, [pc, #340]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	4a54      	ldr	r2, [pc, #336]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe fa2e 	bl	8001960 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fe fa2a 	bl	8001960 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0cb      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	4b49      	ldr	r3, [pc, #292]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ee      	beq.n	8003508 <HAL_RCC_OscConfig+0x334>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fe fa18 	bl	8001960 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe fa14 	bl	8001960 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0b5      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	4b3e      	ldr	r3, [pc, #248]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ee      	bne.n	8003534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	4a38      	ldr	r2, [pc, #224]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003566:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a1 	beq.w	80036b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003572:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b08      	cmp	r3, #8
 800357c:	d05c      	beq.n	8003638 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d141      	bne.n	800360a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b31      	ldr	r3, [pc, #196]	@ (800364c <HAL_RCC_OscConfig+0x478>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe f9e8 	bl	8001960 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe f9e4 	bl	8001960 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e087      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	3b01      	subs	r3, #1
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	491b      	ldr	r1, [pc, #108]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035dc:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <HAL_RCC_OscConfig+0x478>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe f9bd 	bl	8001960 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe f9b9 	bl	8001960 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e05c      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x416>
 8003608:	e054      	b.n	80036b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b10      	ldr	r3, [pc, #64]	@ (800364c <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe f9a6 	bl	8001960 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe f9a2 	bl	8001960 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e045      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x444>
 8003636:	e03d      	b.n	80036b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e038      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
 8003644:	40023800 	.word	0x40023800
 8003648:	40007000 	.word	0x40007000
 800364c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCC_OscConfig+0x4ec>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d028      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d121      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d11a      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003680:	4013      	ands	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003688:	4293      	cmp	r3, r2
 800368a:	d111      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0cc      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b68      	ldr	r3, [pc, #416]	@ (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d90c      	bls.n	8003700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b65      	ldr	r3, [pc, #404]	@ (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b63      	ldr	r3, [pc, #396]	@ (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0b8      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003718:	4b59      	ldr	r3, [pc, #356]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a58      	ldr	r2, [pc, #352]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003730:	4b53      	ldr	r3, [pc, #332]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a52      	ldr	r2, [pc, #328]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800373a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b50      	ldr	r3, [pc, #320]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	494d      	ldr	r1, [pc, #308]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d044      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b47      	ldr	r3, [pc, #284]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d119      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e07f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d003      	beq.n	8003782 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	2b03      	cmp	r3, #3
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	4b3f      	ldr	r3, [pc, #252]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e067      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4934      	ldr	r1, [pc, #208]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b4:	f7fe f8d4 	bl	8001960 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fe f8d0 	bl	8001960 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e04f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20c      	bcs.n	800380c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b22      	ldr	r3, [pc, #136]	@ (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b20      	ldr	r3, [pc, #128]	@ (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e032      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4916      	ldr	r1, [pc, #88]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003836:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	490e      	ldr	r1, [pc, #56]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800384a:	f000 f821 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 800384e:	4602      	mov	r2, r0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	490a      	ldr	r1, [pc, #40]	@ (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	5ccb      	ldrb	r3, [r1, r3]
 800385e:	fa22 f303 	lsr.w	r3, r2, r3
 8003862:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003866:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe f834 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023c00 	.word	0x40023c00
 8003880:	40023800 	.word	0x40023800
 8003884:	08005068 	.word	0x08005068
 8003888:	20000000 	.word	0x20000000
 800388c:	20000004 	.word	0x20000004

08003890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003894:	b094      	sub	sp, #80	@ 0x50
 8003896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a8:	4b79      	ldr	r3, [pc, #484]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d00d      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x40>
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	f200 80e1 	bhi.w	8003a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x34>
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x3a>
 80038c2:	e0db      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b73      	ldr	r3, [pc, #460]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c8:	e0db      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ca:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80038cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ce:	e0d8      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038da:	4b6d      	ldr	r3, [pc, #436]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d063      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	2200      	movs	r2, #0
 80038ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fa:	2300      	movs	r3, #0
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003902:	4622      	mov	r2, r4
 8003904:	462b      	mov	r3, r5
 8003906:	f04f 0000 	mov.w	r0, #0
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	0159      	lsls	r1, r3, #5
 8003910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003914:	0150      	lsls	r0, r2, #5
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4621      	mov	r1, r4
 800391c:	1a51      	subs	r1, r2, r1
 800391e:	6139      	str	r1, [r7, #16]
 8003920:	4629      	mov	r1, r5
 8003922:	eb63 0301 	sbc.w	r3, r3, r1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003934:	4659      	mov	r1, fp
 8003936:	018b      	lsls	r3, r1, #6
 8003938:	4651      	mov	r1, sl
 800393a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800393e:	4651      	mov	r1, sl
 8003940:	018a      	lsls	r2, r1, #6
 8003942:	4651      	mov	r1, sl
 8003944:	ebb2 0801 	subs.w	r8, r2, r1
 8003948:	4659      	mov	r1, fp
 800394a:	eb63 0901 	sbc.w	r9, r3, r1
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800395a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800395e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003962:	4690      	mov	r8, r2
 8003964:	4699      	mov	r9, r3
 8003966:	4623      	mov	r3, r4
 8003968:	eb18 0303 	adds.w	r3, r8, r3
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	462b      	mov	r3, r5
 8003970:	eb49 0303 	adc.w	r3, r9, r3
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003982:	4629      	mov	r1, r5
 8003984:	024b      	lsls	r3, r1, #9
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800398c:	4621      	mov	r1, r4
 800398e:	024a      	lsls	r2, r1, #9
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003996:	2200      	movs	r2, #0
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800399a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800399c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039a0:	f7fd f850 	bl	8000a44 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ac:	e058      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b38      	ldr	r3, [pc, #224]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	4611      	mov	r1, r2
 80039ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	f04f 0000 	mov.w	r0, #0
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	0159      	lsls	r1, r3, #5
 80039d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039da:	0150      	lsls	r0, r2, #5
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4641      	mov	r1, r8
 80039e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a00:	ebb2 040a 	subs.w	r4, r2, sl
 8003a04:	eb63 050b 	sbc.w	r5, r3, fp
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	00eb      	lsls	r3, r5, #3
 8003a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a16:	00e2      	lsls	r2, r4, #3
 8003a18:	4614      	mov	r4, r2
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	4643      	mov	r3, r8
 8003a1e:	18e3      	adds	r3, r4, r3
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	464b      	mov	r3, r9
 8003a24:	eb45 0303 	adc.w	r3, r5, r3
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a36:	4629      	mov	r1, r5
 8003a38:	028b      	lsls	r3, r1, #10
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a40:	4621      	mov	r1, r4
 8003a42:	028a      	lsls	r2, r1, #10
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	61fa      	str	r2, [r7, #28]
 8003a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a54:	f7fc fff6 	bl	8000a44 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a7a:	e002      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3750      	adds	r7, #80	@ 0x50
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	007a1200 	.word	0x007a1200

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	@ (8003ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0a9b      	lsrs	r3, r3, #10
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	@ (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	08005078 	.word	0x08005078

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ae0:	f7ff ffdc 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0b5b      	lsrs	r3, r3, #13
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08005078 	.word	0x08005078

08003b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e041      	b.n	8003b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fd9a 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 fc6e 	bl	8004424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e041      	b.n	8003c38 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f839 	bl	8003c40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	4610      	mov	r0, r2
 8003be2:	f000 fc1f 	bl	8004424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0x1e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_IC_Start_IT+0x46>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_IC_Start_IT+0x2e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_IC_Start_IT+0x46>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_IC_Start_IT+0x3e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_IC_Start_IT+0x46>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_TIM_IC_Start_IT+0x58>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e013      	b.n	8003cd4 <HAL_TIM_IC_Start_IT+0x80>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d104      	bne.n	8003cbc <HAL_TIM_IC_Start_IT+0x68>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e00b      	b.n	8003cd4 <HAL_TIM_IC_Start_IT+0x80>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d104      	bne.n	8003ccc <HAL_TIM_IC_Start_IT+0x78>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_IC_Start_IT+0x80>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cd6:	7bbb      	ldrb	r3, [r7, #14]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cdc:	7b7b      	ldrb	r3, [r7, #13]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0cc      	b.n	8003e80 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_IC_Start_IT+0xa2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cf4:	e013      	b.n	8003d1e <HAL_TIM_IC_Start_IT+0xca>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d104      	bne.n	8003d06 <HAL_TIM_IC_Start_IT+0xb2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d04:	e00b      	b.n	8003d1e <HAL_TIM_IC_Start_IT+0xca>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d104      	bne.n	8003d16 <HAL_TIM_IC_Start_IT+0xc2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d14:	e003      	b.n	8003d1e <HAL_TIM_IC_Start_IT+0xca>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start_IT+0xda>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d2c:	e013      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x102>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_IC_Start_IT+0xea>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x102>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_IC_Start_IT+0xfa>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4c:	e003      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x102>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d841      	bhi.n	8003de0 <HAL_TIM_IC_Start_IT+0x18c>
 8003d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d64 <HAL_TIM_IC_Start_IT+0x110>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08003de1 	.word	0x08003de1
 8003d6c:	08003de1 	.word	0x08003de1
 8003d70:	08003de1 	.word	0x08003de1
 8003d74:	08003dab 	.word	0x08003dab
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003de1 	.word	0x08003de1
 8003d80:	08003de1 	.word	0x08003de1
 8003d84:	08003dbd 	.word	0x08003dbd
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003de1 	.word	0x08003de1
 8003d94:	08003dcf 	.word	0x08003dcf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0202 	orr.w	r2, r2, #2
 8003da6:	60da      	str	r2, [r3, #12]
      break;
 8003da8:	e01d      	b.n	8003de6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0204 	orr.w	r2, r2, #4
 8003db8:	60da      	str	r2, [r3, #12]
      break;
 8003dba:	e014      	b.n	8003de6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	60da      	str	r2, [r3, #12]
      break;
 8003dcc:	e00b      	b.n	8003de6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0210 	orr.w	r2, r2, #16
 8003ddc:	60da      	str	r2, [r3, #12]
      break;
 8003dde:	e002      	b.n	8003de6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d148      	bne.n	8003e7e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	6839      	ldr	r1, [r7, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fd85 	bl	8004904 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_TIM_IC_Start_IT+0x234>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0c:	d01d      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	@ (8003e8c <HAL_TIM_IC_Start_IT+0x238>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <HAL_TIM_IC_Start_IT+0x23c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <HAL_TIM_IC_Start_IT+0x240>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <HAL_TIM_IC_Start_IT+0x244>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <HAL_TIM_IC_Start_IT+0x248>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x1f6>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a16      	ldr	r2, [pc, #88]	@ (8003ea0 <HAL_TIM_IC_Start_IT+0x24c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d111      	bne.n	8003e6e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d010      	beq.n	8003e7e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	e007      	b.n	8003e7e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800

08003ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d020      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0202 	mvn.w	r2, #2
 8003ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fc ff5e 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8003ef4:	e005      	b.n	8003f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa76 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa7d 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0204 	mvn.w	r2, #4
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc ff38 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa50 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fa57 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0208 	mvn.w	r2, #8
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2204      	movs	r2, #4
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc ff12 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fa2a 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fa31 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0210 	mvn.w	r2, #16
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc feec 	bl	8000db0 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa04 	bl	80043e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa0b 	bl	80043fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0201 	mvn.w	r2, #1
 8004008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9e2 	bl	80043d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00c      	beq.n	8004034 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fd14 	bl	8004a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9dc 	bl	8004410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0220 	mvn.w	r2, #32
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fce6 	bl	8004a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800409e:	2302      	movs	r3, #2
 80040a0:	e088      	b.n	80041b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80040c0:	f000 fa5c 	bl	800457c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 020c 	bic.w	r2, r2, #12
 80040d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	619a      	str	r2, [r3, #24]
 80040e6:	e060      	b.n	80041aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d11c      	bne.n	8004128 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80040fe:	f000 fae0 	bl	80046c2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004110:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6999      	ldr	r1, [r3, #24]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	619a      	str	r2, [r3, #24]
 8004126:	e040      	b.n	80041aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d11b      	bne.n	8004166 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800413e:	f000 fb2d 	bl	800479c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 020c 	bic.w	r2, r2, #12
 8004150:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69d9      	ldr	r1, [r3, #28]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	61da      	str	r2, [r3, #28]
 8004164:	e021      	b.n	80041aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d11c      	bne.n	80041a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800417c:	f000 fb4a 	bl	8004814 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800418e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69d9      	ldr	r1, [r3, #28]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	61da      	str	r2, [r3, #28]
 80041a4:	e001      	b.n	80041aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_ConfigClockSource+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0b4      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x186>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004210:	d03e      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xd4>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004216:	f200 8087 	bhi.w	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421e:	f000 8086 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x172>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004226:	d87f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b70      	cmp	r3, #112	@ 0x70
 800422a:	d01a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xa6>
 800422c:	2b70      	cmp	r3, #112	@ 0x70
 800422e:	d87b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b60      	cmp	r3, #96	@ 0x60
 8004232:	d050      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004234:	2b60      	cmp	r3, #96	@ 0x60
 8004236:	d877      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b50      	cmp	r3, #80	@ 0x50
 800423a:	d03c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xfa>
 800423c:	2b50      	cmp	r3, #80	@ 0x50
 800423e:	d873      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b40      	cmp	r3, #64	@ 0x40
 8004242:	d058      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d86f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b30      	cmp	r3, #48	@ 0x30
 800424a:	d064      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b30      	cmp	r3, #48	@ 0x30
 800424e:	d86b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d060      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d867      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d05a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	e062      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004272:	f000 fb27 	bl	80048c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e04f      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a0:	f000 fb10 	bl	80048c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042b2:	609a      	str	r2, [r3, #8]
      break;
 80042b4:	e03c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 f9ce 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2150      	movs	r1, #80	@ 0x50
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fadd 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 fa2a 	bl	800473c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2160      	movs	r1, #96	@ 0x60
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 facd 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 80042f4:	e01c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	461a      	mov	r2, r3
 8004304:	f000 f9ae 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2140      	movs	r1, #64	@ 0x40
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fabd 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 8004314:	e00c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 fab4 	bl	800488e <TIM_ITRx_SetConfig>
      break;
 8004326:	e003      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e000      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800432e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	d831      	bhi.n	80043c4 <HAL_TIM_ReadCapturedValue+0x78>
 8004360:	a201      	add	r2, pc, #4	@ (adr r2, 8004368 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080043c5 	.word	0x080043c5
 8004370:	080043c5 	.word	0x080043c5
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043a7 	.word	0x080043a7
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043bb 	.word	0x080043bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	60fb      	str	r3, [r7, #12]

      break;
 80043a4:	e00f      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	60fb      	str	r3, [r7, #12]

      break;
 80043ae:	e00a      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b6:	60fb      	str	r3, [r7, #12]

      break;
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	60fb      	str	r3, [r7, #12]

      break;
 80043c2:	e000      	b.n	80043c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043c4:	bf00      	nop
  }

  return tmpreg;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a46      	ldr	r2, [pc, #280]	@ (8004550 <TIM_Base_SetConfig+0x12c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a43      	ldr	r2, [pc, #268]	@ (8004554 <TIM_Base_SetConfig+0x130>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a42      	ldr	r2, [pc, #264]	@ (8004558 <TIM_Base_SetConfig+0x134>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a41      	ldr	r2, [pc, #260]	@ (800455c <TIM_Base_SetConfig+0x138>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a40      	ldr	r2, [pc, #256]	@ (8004560 <TIM_Base_SetConfig+0x13c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a35      	ldr	r2, [pc, #212]	@ (8004550 <TIM_Base_SetConfig+0x12c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02b      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004484:	d027      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a32      	ldr	r2, [pc, #200]	@ (8004554 <TIM_Base_SetConfig+0x130>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d023      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a31      	ldr	r2, [pc, #196]	@ (8004558 <TIM_Base_SetConfig+0x134>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01f      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a30      	ldr	r2, [pc, #192]	@ (800455c <TIM_Base_SetConfig+0x138>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01b      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <TIM_Base_SetConfig+0x13c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d017      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2e      	ldr	r2, [pc, #184]	@ (8004564 <TIM_Base_SetConfig+0x140>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <TIM_Base_SetConfig+0x144>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2c      	ldr	r2, [pc, #176]	@ (800456c <TIM_Base_SetConfig+0x148>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <TIM_Base_SetConfig+0x14c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <TIM_Base_SetConfig+0x150>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <TIM_Base_SetConfig+0x154>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <TIM_Base_SetConfig+0x12c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0xf8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a12      	ldr	r2, [pc, #72]	@ (8004560 <TIM_Base_SetConfig+0x13c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	611a      	str	r2, [r3, #16]
  }
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010000 	.word	0x40010000
 8004554:	40000400 	.word	0x40000400
 8004558:	40000800 	.word	0x40000800
 800455c:	40000c00 	.word	0x40000c00
 8004560:	40010400 	.word	0x40010400
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800
 8004570:	40001800 	.word	0x40001800
 8004574:	40001c00 	.word	0x40001c00
 8004578:	40002000 	.word	0x40002000

0800457c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f023 0201 	bic.w	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a28      	ldr	r2, [pc, #160]	@ (8004648 <TIM_TI1_SetConfig+0xcc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01b      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d017      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4a25      	ldr	r2, [pc, #148]	@ (800464c <TIM_TI1_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a24      	ldr	r2, [pc, #144]	@ (8004650 <TIM_TI1_SetConfig+0xd4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a23      	ldr	r2, [pc, #140]	@ (8004654 <TIM_TI1_SetConfig+0xd8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a22      	ldr	r2, [pc, #136]	@ (8004658 <TIM_TI1_SetConfig+0xdc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a21      	ldr	r2, [pc, #132]	@ (800465c <TIM_TI1_SetConfig+0xe0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_TI1_SetConfig+0x66>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a20      	ldr	r2, [pc, #128]	@ (8004660 <TIM_TI1_SetConfig+0xe4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <TIM_TI1_SetConfig+0x6a>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <TIM_TI1_SetConfig+0x6c>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e003      	b.n	8004606 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800460c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	b2db      	uxtb	r3, r3
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f023 030a 	bic.w	r3, r3, #10
 8004620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 030a 	and.w	r3, r3, #10
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40010400 	.word	0x40010400
 800465c:	40014000 	.word	0x40014000
 8004660:	40001800 	.word	0x40001800

08004664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0201 	bic.w	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800468e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 030a 	bic.w	r3, r3, #10
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0210 	bic.w	r2, r3, #16
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004700:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	031b      	lsls	r3, r3, #12
 8004706:	b29b      	uxth	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004714:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0210 	bic.w	r2, r3, #16
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	031b      	lsls	r3, r3, #12
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80047ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004840:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	031b      	lsls	r3, r3, #12
 8004858:	b29b      	uxth	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	031b      	lsls	r3, r3, #12
 800486c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f043 0307 	orr.w	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	021a      	lsls	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	2201      	movs	r2, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	43db      	mvns	r3, r3
 8004926:	401a      	ands	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004964:	2302      	movs	r3, #2
 8004966:	e05a      	b.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a21      	ldr	r2, [pc, #132]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b4:	d01d      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a17      	ldr	r2, [pc, #92]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a15      	ldr	r2, [pc, #84]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d10c      	bne.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40001800 	.word	0x40001800

08004a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e042      	b.n	8004b08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fe34 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	@ 0x24
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f82b 	bl	8004b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b14:	b0c0      	sub	sp, #256	@ 0x100
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2c:	68d9      	ldr	r1, [r3, #12]
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	ea40 0301 	orr.w	r3, r0, r1
 8004b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b68:	f021 010c 	bic.w	r1, r1, #12
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b76:	430b      	orrs	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	6999      	ldr	r1, [r3, #24]
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	ea40 0301 	orr.w	r3, r0, r1
 8004b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8004ddc <UART_SetConfig+0x2cc>)
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d005      	beq.n	8004bb0 <UART_SetConfig+0xa0>
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b8d      	ldr	r3, [pc, #564]	@ (8004de0 <UART_SetConfig+0x2d0>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d104      	bne.n	8004bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7fe ff94 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8004bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bb8:	e003      	b.n	8004bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bba:	f7fe ff7b 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8004bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bcc:	f040 810c 	bne.w	8004de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004be2:	4622      	mov	r2, r4
 8004be4:	462b      	mov	r3, r5
 8004be6:	1891      	adds	r1, r2, r2
 8004be8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bea:	415b      	adcs	r3, r3
 8004bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	eb12 0801 	adds.w	r8, r2, r1
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	eb43 0901 	adc.w	r9, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c12:	4690      	mov	r8, r2
 8004c14:	4699      	mov	r9, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	eb18 0303 	adds.w	r3, r8, r3
 8004c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c20:	462b      	mov	r3, r5
 8004c22:	eb49 0303 	adc.w	r3, r9, r3
 8004c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c3e:	460b      	mov	r3, r1
 8004c40:	18db      	adds	r3, r3, r3
 8004c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c44:	4613      	mov	r3, r2
 8004c46:	eb42 0303 	adc.w	r3, r2, r3
 8004c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c54:	f7fb fef6 	bl	8000a44 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4b61      	ldr	r3, [pc, #388]	@ (8004de4 <UART_SetConfig+0x2d4>)
 8004c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	011c      	lsls	r4, r3, #4
 8004c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	1891      	adds	r1, r2, r2
 8004c7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c80:	415b      	adcs	r3, r3
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c88:	4641      	mov	r1, r8
 8004c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c8e:	4649      	mov	r1, r9
 8004c90:	eb43 0b01 	adc.w	fp, r3, r1
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca8:	4692      	mov	sl, r2
 8004caa:	469b      	mov	fp, r3
 8004cac:	4643      	mov	r3, r8
 8004cae:	eb1a 0303 	adds.w	r3, sl, r3
 8004cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	18db      	adds	r3, r3, r3
 8004cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cda:	4613      	mov	r3, r2
 8004cdc:	eb42 0303 	adc.w	r3, r2, r3
 8004ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cea:	f7fb feab 	bl	8000a44 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <UART_SetConfig+0x2d4>)
 8004cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2264      	movs	r2, #100	@ 0x64
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	1acb      	subs	r3, r1, r3
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d0a:	4b36      	ldr	r3, [pc, #216]	@ (8004de4 <UART_SetConfig+0x2d4>)
 8004d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d18:	441c      	add	r4, r3
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d34:	415b      	adcs	r3, r3
 8004d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	1851      	adds	r1, r2, r1
 8004d40:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d42:	4649      	mov	r1, r9
 8004d44:	414b      	adcs	r3, r1
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d54:	4659      	mov	r1, fp
 8004d56:	00cb      	lsls	r3, r1, #3
 8004d58:	4651      	mov	r1, sl
 8004d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5e:	4651      	mov	r1, sl
 8004d60:	00ca      	lsls	r2, r1, #3
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	4642      	mov	r2, r8
 8004d6a:	189b      	adds	r3, r3, r2
 8004d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d70:	464b      	mov	r3, r9
 8004d72:	460a      	mov	r2, r1
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d90:	460b      	mov	r3, r1
 8004d92:	18db      	adds	r3, r3, r3
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d96:	4613      	mov	r3, r2
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004da6:	f7fb fe4d 	bl	8000a44 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <UART_SetConfig+0x2d4>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	@ 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	3332      	adds	r3, #50	@ 0x32
 8004dc2:	4a08      	ldr	r2, [pc, #32]	@ (8004de4 <UART_SetConfig+0x2d4>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 0207 	and.w	r2, r3, #7
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4422      	add	r2, r4
 8004dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dd8:	e106      	b.n	8004fe8 <UART_SetConfig+0x4d8>
 8004dda:	bf00      	nop
 8004ddc:	40011000 	.word	0x40011000
 8004de0:	40011400 	.word	0x40011400
 8004de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004df2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dfa:	4642      	mov	r2, r8
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	1891      	adds	r1, r2, r2
 8004e00:	6239      	str	r1, [r7, #32]
 8004e02:	415b      	adcs	r3, r3
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	1854      	adds	r4, r2, r1
 8004e0e:	4649      	mov	r1, r9
 8004e10:	eb43 0501 	adc.w	r5, r3, r1
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	00eb      	lsls	r3, r5, #3
 8004e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e22:	00e2      	lsls	r2, r4, #3
 8004e24:	4614      	mov	r4, r2
 8004e26:	461d      	mov	r5, r3
 8004e28:	4643      	mov	r3, r8
 8004e2a:	18e3      	adds	r3, r4, r3
 8004e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e30:	464b      	mov	r3, r9
 8004e32:	eb45 0303 	adc.w	r3, r5, r3
 8004e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e56:	4629      	mov	r1, r5
 8004e58:	008b      	lsls	r3, r1, #2
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e60:	4621      	mov	r1, r4
 8004e62:	008a      	lsls	r2, r1, #2
 8004e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e68:	f7fb fdec 	bl	8000a44 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b60      	ldr	r3, [pc, #384]	@ (8004ff4 <UART_SetConfig+0x4e4>)
 8004e72:	fba3 2302 	umull	r2, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	011c      	lsls	r4, r3, #4
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	61b9      	str	r1, [r7, #24]
 8004e94:	415b      	adcs	r3, r3
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	1851      	adds	r1, r2, r1
 8004ea0:	6139      	str	r1, [r7, #16]
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	414b      	adcs	r3, r1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb4:	4659      	mov	r1, fp
 8004eb6:	00cb      	lsls	r3, r1, #3
 8004eb8:	4651      	mov	r1, sl
 8004eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ebe:	4651      	mov	r1, sl
 8004ec0:	00ca      	lsls	r2, r1, #3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4642      	mov	r2, r8
 8004eca:	189b      	adds	r3, r3, r2
 8004ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	460a      	mov	r2, r1
 8004ed4:	eb42 0303 	adc.w	r3, r2, r3
 8004ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ee6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	008b      	lsls	r3, r1, #2
 8004ef8:	4641      	mov	r1, r8
 8004efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efe:	4641      	mov	r1, r8
 8004f00:	008a      	lsls	r2, r1, #2
 8004f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f06:	f7fb fd9d 	bl	8000a44 <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4b38      	ldr	r3, [pc, #224]	@ (8004ff4 <UART_SetConfig+0x4e4>)
 8004f12:	fba3 2301 	umull	r2, r3, r3, r1
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2264      	movs	r2, #100	@ 0x64
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	1acb      	subs	r3, r1, r3
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	3332      	adds	r3, #50	@ 0x32
 8004f24:	4a33      	ldr	r2, [pc, #204]	@ (8004ff4 <UART_SetConfig+0x4e4>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f30:	441c      	add	r4, r3
 8004f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f36:	2200      	movs	r2, #0
 8004f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6039      	str	r1, [r7, #0]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f82:	464b      	mov	r3, r9
 8004f84:	460a      	mov	r2, r1
 8004f86:	eb42 0303 	adc.w	r3, r2, r3
 8004f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f96:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	008b      	lsls	r3, r1, #2
 8004fa8:	4641      	mov	r1, r8
 8004faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fae:	4641      	mov	r1, r8
 8004fb0:	008a      	lsls	r2, r1, #2
 8004fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fb6:	f7fb fd45 	bl	8000a44 <__aeabi_uldivmod>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <UART_SetConfig+0x4e4>)
 8004fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	2164      	movs	r1, #100	@ 0x64
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	3332      	adds	r3, #50	@ 0x32
 8004fd2:	4a08      	ldr	r2, [pc, #32]	@ (8004ff4 <UART_SetConfig+0x4e4>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4422      	add	r2, r4
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff4:	51eb851f 	.word	0x51eb851f

08004ff8 <memset>:
 8004ff8:	4402      	add	r2, r0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d100      	bne.n	8005002 <memset+0xa>
 8005000:	4770      	bx	lr
 8005002:	f803 1b01 	strb.w	r1, [r3], #1
 8005006:	e7f9      	b.n	8004ffc <memset+0x4>

08005008 <__libc_init_array>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4d0d      	ldr	r5, [pc, #52]	@ (8005040 <__libc_init_array+0x38>)
 800500c:	4c0d      	ldr	r4, [pc, #52]	@ (8005044 <__libc_init_array+0x3c>)
 800500e:	1b64      	subs	r4, r4, r5
 8005010:	10a4      	asrs	r4, r4, #2
 8005012:	2600      	movs	r6, #0
 8005014:	42a6      	cmp	r6, r4
 8005016:	d109      	bne.n	800502c <__libc_init_array+0x24>
 8005018:	4d0b      	ldr	r5, [pc, #44]	@ (8005048 <__libc_init_array+0x40>)
 800501a:	4c0c      	ldr	r4, [pc, #48]	@ (800504c <__libc_init_array+0x44>)
 800501c:	f000 f818 	bl	8005050 <_init>
 8005020:	1b64      	subs	r4, r4, r5
 8005022:	10a4      	asrs	r4, r4, #2
 8005024:	2600      	movs	r6, #0
 8005026:	42a6      	cmp	r6, r4
 8005028:	d105      	bne.n	8005036 <__libc_init_array+0x2e>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005030:	4798      	blx	r3
 8005032:	3601      	adds	r6, #1
 8005034:	e7ee      	b.n	8005014 <__libc_init_array+0xc>
 8005036:	f855 3b04 	ldr.w	r3, [r5], #4
 800503a:	4798      	blx	r3
 800503c:	3601      	adds	r6, #1
 800503e:	e7f2      	b.n	8005026 <__libc_init_array+0x1e>
 8005040:	08005088 	.word	0x08005088
 8005044:	08005088 	.word	0x08005088
 8005048:	08005088 	.word	0x08005088
 800504c:	0800508c 	.word	0x0800508c

08005050 <_init>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr

0800505c <_fini>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr
